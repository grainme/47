{
  "title": "Difference between Primitives and Objects in JS",
  "content": "Initializing a new String primitive and a new String object looks similar in terms of results, but they have fundamental differences:\n\n```js\nconst stringPrimitive = \"A new string\";\nconst stringObject = new String(\"A new string\");\n```\n\nWhen using `typeof`, the first example returns 'string' while the second returns 'object'.\n\nPrimitive types in JavaScript are: String, Number, Boolean, Undefined, Symbol, and BigInt.\n\nNull is a special case. Although it's considered a primitive type, `typeof null` returns 'object'. This is a long-standing bug in JavaScript.\n\nThere are significant differences between primitive types and objects:\n\n1. Immutability: All primitives are immutable. It's important not to confuse a primitive itself with a variable assigned a primitive value. The variable may be reassigned a new value, but the primitive value cannot be changed.\n\n```js\nlet name = \"Marouane\";\nname = \"Gta\"; // This is fine, we're assigning a new value to the variable\nname[1] = 'H'; // This doesn't work as expected\nconsole.log(name); // Still outputs \"Gta\"\n```\n\nThe last line doesn't throw an error, but it also doesn't modify the string. The value of `name` remains \"Gta\".\n\n2. Passing: Primitive types are passed by value. Objects are passed by reference.\n3. Copying: Primitive types are copied by value. Objects are copied by reference.\n4. Comparison: Primitive types are compared by value. Objects are compared by reference.\n\nMost of the time, we're creating string primitives. JavaScript is able to access and use the built-in methods and properties of the String object wrapper without actually changing the type of our primitive. In the background, this process happens:\n\n1. The primitive is temporarily converted to an object\n2. The method is called on this temporary object\n3. The result is returned as a new primitive\n\nThis process is called 'auto-boxing' and it happens automatically when you call a method on a primitive.\n\n Have a good one!\n Marouane"
}
